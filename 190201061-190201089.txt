using GMap.NET.MapProviders;
using GMap.NET.WindowsForms;
using System;
using GMap.NET.WindowsForms.Markers;
using GMap.NET;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace YazLab1
{
    public partial class Form1 : Form
    {
        public List<PointLatLng> points;

        public Form1()
        {
            InitializeComponent();
            
        }

        static Bağlantı con = new Bağlantı();
        Dictionary<string, Sipariş> siparişler;

        private void Form1_Load(object sender, EventArgs e)
        {
            GMapProviders.GoogleMap.ApiKey = @"AIzaSyDxUEZtroae7yU6vHxw9qOPuUCXpLKHV90";
            try
            {
                con.client = new FireSharp.FirebaseClient(con.config);
            }
            catch
            {
                MessageBox.Show("Bağlantı kurulamadı.");
            }
            points = new List<PointLatLng>();
            map.MapProvider = GMapProviders.GoogleMap;
            map.DragButton = MouseButtons.Left;
            map.ShowCenter = false;
            map.Position = new PointLatLng(40.7659693389566, 29.9286139011383);//CUMHURİYET PARKI
            PointLatLng baş = new PointLatLng(40.7659693389566, 29.9286139011383);
            points.Add(baş);
            map.MinZoom = 0;
            map.MaxZoom = 18;
            map.Zoom = 16;

            veriAl();
        }

        private void map_MouseClick(object sender, MouseEventArgs e)
        {
            if(e.Button == MouseButtons.Right)
            {
                var point = map.FromLocalToLatLng(e.X, e.Y);
                double lat = point.Lat;
                double lng = point.Lng;
                txtLat.Text = lat + "";
                txtLon.Text = lng + "";
            }
        }

        private async void veriAl()
        {
            try
            {
                var response = await con.client.GetAsync("Siparişler");
                siparişler = response.ResultAs<Dictionary<string, Sipariş>>();
                if (siparişler != null)
                {
                    foreach (var sipariş in siparişler)
                    {
                        if (sipariş.Value.TeslimDurum == "Teslim Edilmedi")
                        {
                            PointLatLng point = new PointLatLng(sipariş.Value.MüşteriEnlem, sipariş.Value.MüşteriBoylam);

                            points.Add(point);

                        }
                    }
                    for (int i = 0; i < points.Count; i++)
                    {
                        GMapOverlay markers = new GMapOverlay("markers");
                        if (i == 0)
                        {
                            GMapMarker markerbaş = new GMarkerGoogle(points[i], GMarkerGoogleType.blue);
                            markers.Markers.Add(markerbaş);
                            map.Overlays.Add(markers);
                        }
                        else
                        {
                            GMapMarker marker = new GMarkerGoogle(points[i], GMarkerGoogleType.red);
                            markers.Markers.Add(marker);
                            map.Overlays.Add(markers);
                        }

                    }

                    MapRoute route;
                    GMapRoute r;
                    GMapOverlay routes;
                    // SELECTION SORT
                    double tempdis1 = 0;
                    double tempdis2 = 0;
                    for (int i = 0; i < points.Count - 1; i++)
                    {
                        int min = i + 1;
                        for (int j = i + 1; j < points.Count; j++)
                        {
                            if (points[j] != null)
                            {
                                route = GoogleMapProvider.Instance.GetRoute(points[i], points[j], true, false, 14);
                                if (j >= i + 2)
                                {
                                    tempdis2 = route.Distance;
                                }
                                else
                                {
                                    tempdis1 = route.Distance;
                                }
                                if (tempdis2 != 0 && tempdis2 < tempdis1)
                                {
                                    min = j; 
                                    tempdis1 = tempdis2;
                                }

                            }
                        }
                        PointLatLng temp = points[min];
                        points[min] = points[i + 1];
                        points[i + 1] = temp;
                    }

                    for (int i = 0; i < points.Count - 1; i++)
                    {
                        if (points[i + 1] != null)
                        {
                            route = GoogleMapProvider.Instance.GetRoute(points[i], points[i + 1], true, false, 14);
                            r = new GMapRoute(route.Points, "My Route")
                            {
                                Stroke = new Pen(Color.Red, 5)
                            };

                            routes = new GMapOverlay("routes");
                            routes.Routes.Add(r);
                            map.Overlays.Add(routes);
                        }
                    }
                }
            }
            catch
            {
                MessageBox.Show("Hata");
            }
        }

    }
}

*******************************************************************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace YazLab1
{
    public partial class Login : Form
    {

        public Şifre şifre;
        public Kayıt kayıt;
        public Arayüz arayüz;

        public Login()
        {
            InitializeComponent();
        }

        Bağlantı con = new Bağlantı();

        private void btnGiriş_Click(object sender, EventArgs e)
        {

            try
            {
                con.client = new FireSharp.FirebaseClient(con.config);
                con.response = con.client.Get("Kullanıcılar/" + txtKullanıcı.Text);
                Kullanıcı kullanıcı = con.response.ResultAs<Kullanıcı>();

                if(txtKullanıcı.Text == kullanıcı.kAdı && txtŞifre.Text == kullanıcı.şifre)
                {
                    arayüz = new Arayüz();
                    arayüz.Show();
                    this.Hide();
                }
                else
                {
                    MessageBox.Show("Kullanıcı adı veya şifre doğru değil!");
                }
            }
            catch
            {
                MessageBox.Show("Bağlantı kurulamadı!");
            }
        }

        private void btnKayıt_Click(object sender, EventArgs e)
        {
            kayıt = new Kayıt();
            kayıt.Show();
            this.Hide();
        }

        private void btnŞifre_Click(object sender, EventArgs e)
        {
            şifre = new Şifre();
            şifre.Show();
            this.Hide();
        }
    }
}

*****************************************************************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace YazLab1
{
    public partial class Kayıt : Form
    {
        public Kayıt()
        {
            InitializeComponent();
        }
        static Bağlantı con = new Bağlantı();

        private void btnTamamla_Click(object sender, EventArgs e)
        {

            try
            {
                con.client = new FireSharp.FirebaseClient(con.config);
            }
            catch
            {
                MessageBox.Show("Bağlantı kurulamadı.");
            }

            if (txtŞifre.Text.Equals(txtŞifre2.Text)){

                Kullanıcı kullanıcı = new Kullanıcı()
                {
                    kAdı = txtKullanıcı.Text,
                    şifre = txtŞifre.Text,
                };
                var setter = con.client.Set("Kullanıcılar/" + txtKullanıcı.Text, kullanıcı);
                txtKullanıcı.Text = "";
                txtŞifre.Text = "";
                txtŞifre2.Text = "";
            }
            else
            {
            MessageBox.Show("Şifreler eşleşmiyor");
            }
        }

        private void btnGeri_Click(object sender, EventArgs e)
        {
            Login login = new Login();
            login.Show();
            this.Hide();
        }
    }
}

*****************************************************************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace YazLab1
{
    public partial class Şifre : Form
    {
        public Şifre()
        {
            InitializeComponent();
        }

        Bağlantı con = new Bağlantı();

        private void btnDeğiş_Click(object sender, EventArgs e)
        {
            try
            {
                con.client = new FireSharp.FirebaseClient(con.config);
                con.response = con.client.Get("Kullanıcılar/" + txtKullanıcı.Text);
                Kullanıcı kullanıcı = con.response.ResultAs<Kullanıcı>();

                if (txtKullanıcı.Text != kullanıcı.kAdı || txtŞifre1.Text != kullanıcı.şifre)
                {
                    MessageBox.Show("Kullanıcı adı veya şifre doğru değil!");
                }
                else
                {
                    if (txtŞifre2.Text.Equals(txtŞifre3.Text))
                    {
                        Kullanıcı kullanıcı1 = new Kullanıcı()
                        {
                            kAdı = txtKullanıcı.Text,
                            şifre = txtŞifre2.Text
                        };
                        var setter = con.client.Update("Kullanıcılar/" + txtKullanıcı.Text, kullanıcı1);
                        txtKullanıcı.Text = "";
                        txtŞifre1.Text = "";
                        txtŞifre2.Text = "";
                        txtŞifre3.Text = "";
                    }
                    else
                    {
                        MessageBox.Show("Şifreler eşleşmiyor!");
                    }
                }
            }
            catch
            {
                MessageBox.Show("Bağlantı kurulamadı.");
            }
        }

        private void btnGeri_Click(object sender, EventArgs e)
        {
            Login login = new Login();
            login.Show();
            this.Hide();

        }
    }
}

***************************************************************************************************************

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace YazLab1
{
    public partial class Arayüz : Form
    {
        public Arayüz()
        {
            InitializeComponent();
        }

        static Bağlantı con = new Bağlantı();
        public Form1 harita;
        Dictionary<string, Sipariş> siparişler;

        private void btnEkle_Click(object sender, EventArgs e)
        {
            try 
            {
                con.client = new FireSharp.FirebaseClient(con.config);
            }
            catch
            {
                MessageBox.Show("Bağlantı kurulamadı.");
            }

            Sipariş sipariş = new Sipariş()
            {
                TelNo = txtTel.Text,
                MüşteriAd = txtMüşteriAd.Text,
                MüşteriEnlem = Convert.ToDouble(txtMüşteriEn.Text),
                MüşteriBoylam = Convert.ToDouble(txtMüşteriBoy.Text),
                TeslimDurum = "Teslim Edilmedi"
            };

            var setter = con.client.Set("Siparişler/" + txtTel.Text, sipariş);
            txtTel.Text = "";
            txtMüşteriAd.Text = "";
            txtMüşteriEn.Text = "";
            txtMüşteriBoy.Text = "";

            güncelle();
        }

        private void Arayüz_Load(object sender, EventArgs e)
        {
            harita = new Form1();
            harita.Show();
            try
            {
                con.client = new FireSharp.FirebaseClient(con.config);
            }
            catch
            {
                MessageBox.Show("Bağlantı kurulamadı.");
            }

            güncelle();

        }
       
        private async void güncelle()
        {
            try
            {
                tablo.Rows.Clear();
                var response = await con.client.GetAsync("Siparişler");
                siparişler = response.ResultAs<Dictionary<string, Sipariş>>();

                if (siparişler != null)
                {
                    foreach (var sipariş in siparişler)
                    {
                        tablo.Rows.Add(
                            sipariş.Value.TelNo,
                            sipariş.Value.MüşteriAd,
                            sipariş.Value.MüşteriEnlem,
                            sipariş.Value.MüşteriBoylam,
                            sipariş.Value.TeslimDurum
                        );
                    }
                }
            }
            catch
            {
                MessageBox.Show("Hata");
            }
            harita.Close();
            harita = new Form1();
            harita.Show();
        }

        private void btnTeslim_Click(object sender, EventArgs e)
        {
            try
            {
                con.client = new FireSharp.FirebaseClient(con.config);
            }
            catch
            {
                MessageBox.Show("Bağlantı kurulamadı.");
            }

            Sipariş sipariş1 = new Sipariş()
            {
                TelNo = txtTel.Text,
                MüşteriAd = txtMüşteriAd.Text,
                MüşteriEnlem = Convert.ToDouble(txtMüşteriEn.Text),
                MüşteriBoylam = Convert.ToDouble(txtMüşteriBoy.Text),
                TeslimDurum = "Teslim Edildi"
            };
            var setter = con.client.Update("Siparişler/" + txtTel.Text, sipariş1);
            MessageBox.Show("Kargo teslim edildi.");
            txtTel.Text = "";
            txtMüşteriAd.Text = "";
            txtMüşteriBoy.Text = "";
            txtMüşteriEn.Text = "";
            güncelle();
        }

        private void btnSil_Click(object sender, EventArgs e)
        {
            con.response = con.client.Delete("Siparişler/" + txtTel.Text);
            MessageBox.Show("Sipariş silindi.");
            txtTel.Text = "";
            txtMüşteriAd.Text = "";
            txtMüşteriBoy.Text = "";
            txtMüşteriEn.Text = "";
            güncelle();
        }

        private void tablo_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            txtTel.Text = Convert.ToString(tablo.Rows[e.RowIndex].Cells[0].Value);
            txtMüşteriAd.Text = Convert.ToString(tablo.Rows[e.RowIndex].Cells[1].Value);
            txtMüşteriEn.Text = Convert.ToString(tablo.Rows[e.RowIndex].Cells[2].Value);
            txtMüşteriBoy.Text = Convert.ToString(tablo.Rows[e.RowIndex].Cells[3].Value);
        }
    }
}

**************************************************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace YazLab1
{
    class Sipariş
    {
        public string TelNo { get; set; }
        public string MüşteriAd { get; set; }
        public double MüşteriEnlem { get; set; }
        public double MüşteriBoylam { get; set; }
        public string TeslimDurum { get; set; }
    }
}
*****************************************************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace YazLab1
{
    class Kullanıcı
    {
        public string kAdı { get; set; }
        public string şifre { get; set; }
    }
}
********************************************************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FireSharp.Config;
using FireSharp.Interfaces;
using FireSharp.Response;

namespace YazLab1
{
    class Bağlantı
    {
        public IFirebaseConfig config = new FirebaseConfig() 
        {
            AuthSecret = "tLFGqfIOoOzgxbgJA7xPMl2LlfJyA11zIP0dlBqD",
            BasePath = "https://yazlab1-4852e-default-rtdb.europe-west1.firebasedatabase.app/"
        };
        public IFirebaseClient client;
        public FirebaseResponse response;

    }
}